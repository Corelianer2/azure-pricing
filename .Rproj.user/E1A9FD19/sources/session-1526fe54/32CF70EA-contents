install.packages("tidygeocoder")
install.packages("maps")

library("duckdb")
library("dplyr")
library("stringr")
library("ggplot2")
library(tidygeocoder)

world <- map_data("world")

con <- dbConnect(duckdb::duckdb(), dbdir = "azure_prices.duckdb")


#'  Azure Prices Dataset from Microsoft
#'
#' The prices are retail prices from the following API https://learn.microsoft.com/en-us/rest/api/cost-management/retail-prices/azure-retail-prices
#'
#' @format A data frame with 100 rows and 4 variables:
#' \describe{
#'   \item{meterName}{Unique identifier for each order (integer)}
#'   \item{type}{Meter consumption type. Other types are Reservation and Consumption.}
#'   \item{armRegionName}{	Azure Resource Manager region where the service is available. This version only supports prices on Commercial Cloud.}
#'   \item{location}{Azure data center where the resource is deployed}
#'   \item{serviceFamily}{Service family of the SKU}
#'   \item{serviceName}{Name of the service}
#'   \item{armSkuName}{SKU name registered in Azure}
#'    \item{term}{Term length for an Azure savings plan, associated with savingsPlan information.}
#' }
#' @source Generated for example purposes.
"azure_prices"

data <- dbReadTable(con, "azure_prices")

cleaned_data <- data |>
  mutate(
    effectiveStartDate = as.Date(effectiveStartDate),
    effectiveEndDate = as.Date(effectiveEndDate),
  )

# Display the structure of the data

linux_data <- cleaned_data |>
  filter(meterName == "D32ads v6") |>
  filter(type == "Consumption") |>
  filter(!endsWith(productName, "Windows")) |>
  arrange(desc(retailPrice)) |>
  geocode(location, method = "osm", lat = latitude, long = longitude)


# Fix wrongly geocoded "EU West", set to Amsterdam, Netherlands
linux_data$latitude[linux_data$location == "EU West"] <- 52.379189
linux_data$longitude[linux_data$location == "EU West"] <- 4.899431

View(linux_data)

windows_data <- cleaned_data |>
  filter(meterName == "D32ads v6") |>
  filter(type == "Consumption") |>
  filter(endsWith(productName, "Windows")) |>
  arrange(desc(retailPrice)) |>
  geocode(location, method = "osm", lat = latitude, long = longitude)

# Fix wrongly geocoded "EU West", set to Amsterdam, Netherlands
windows_data$latitude[windows_data$location == "EU West"] <- 52.379189
windows_data$longitude[windows_data$location == "EU West"] <- 4.899431

proceq_offices <- data.frame(
  location = c("Ringstrasse 2,8603 Schwerzenbach",
  "Aliquippa, PA 15001, USA",
  "Bedford,MK44 3RZ,United Kingdom",
  "1 Fusionopolis Way, Singapore"),
  office_name = c("HQ Switzerland","USA office","UK Office", "Singapore Office")
  )|>
  geocode(location, method = "osm", lat = latitude, long = longitude)

View(proceq_offices)


# Plot world map with your data as points, colored by retailPrice
ggplot() +
  geom_polygon(data = world, aes(x = long, y = lat, group = group),
               fill = "lightblue", color = "gray70") +
  geom_point(data = windows_data,
             aes(x = longitude, y = latitude, color = retailPrice),
             size = 2, alpha = 0.8) +

  
  # Highlight "EU West" with a larger, distinct point
  geom_point(data = subset(windows_data, location == "EU West"),
             aes(x = longitude, y = latitude, color = retailPrice),
             size = 4, alpha = 0.8) +

  
  geom_point(data = proceq_offices,
             aes(x = longitude, y = latitude),
             color = "red", size = 4, shape = 17) +
  geom_text(data = subset(proceq_offices, office_name != "HQ Switzerland"),
            aes(x = longitude, y = latitude, label = office_name),
            color = "black", vjust=-2, size = 3) +
  geom_text(data = subset(proceq_offices, office_name == "HQ Switzerland"),
            aes(x = longitude, y = latitude, label = office_name),
            color = "black", vjust=2, size = 3) +
  scale_color_viridis_c(option = "plasma") +
  theme_minimal() +
  labs(title = "World Map with Azure Retail Price per hour in USD and Proceq Offices, large point is EU West for D32ads v6 Virtual machine used for SAP",
       color = "Retail Price")

View(windows_data)
